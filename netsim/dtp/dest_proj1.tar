./	(cd ../netsim; make depend)
	makedepend $(SOURCES)

clean:
	(cd ../netsim; make clean)
	rm *.o

# DO NOT DELETE

main.o: ../netsim/common.h /usr/include/sys/types.h
main.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
main.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
main.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
main.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
main.o: /usr/include/sys/time.h /usr/include/stdlib.h
main.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
main.o: ../netsim/Config.h ../netsim/Packet.h ../netsim/Timer.h
main.o: ../netsim/PacketScheduler.h ../netsim/Scheduler.h
main.o: ../netsim/Topology.h /usr/include/unistd.h /usr/include/sys/unistd.h
FDTPFlow.o: ../netsim/common.h /usr/include/sys/types.h
FDTPFlow.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
FDTPFlow.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
FDTPFlow.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
FDTPFlow.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
FDTPFlow.o: /usr/include/sys/time.h /usr/include/stdlib.h
FDTPFlow.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
FDTPFlow.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/Packet.h
FDTPFlow.o: DTPPacket.h ../netsim/Timer.h ../netsim/PacketScheduler.h
FDTPFlow.o: ../netsim/Scheduler.h FDTPFlow.h Host.h ../netsim/Topology.h
FDTPFlow.o: Router.h
Router.o: ../netsim/common.h /usr/include/sys/types.h
Router.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
Router.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
Router.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
Router.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
Router.o: /usr/include/sys/time.h /usr/include/stdlib.h
Router.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
Router.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/PacketScheduler.h
Router.o: ../netsim/Timer.h ../netsim/Scheduler.h Router.h FDTPFlow.h Host.h
Host.o: ../netsim/common.h /usr/include/sys/types.h
Host.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
Host.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
Host.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
Host.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
Host.o: /usr/include/sys/time.h /usr/include/stdlib.h
Host.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
Host.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/Packet.h DTPPacket.h
Host.o: ../netsim/PacketScheduler.h ../netsim/Timer.h ../netsim/Scheduler.h
Host.o: Host.h Router.h
DTPPacket.o: ../netsim/common.h /usr/include/sys/types.h
DTPPacket.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
DTPPacket.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
DTPPacket.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
DTPPacket.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
DTPPacket.o: /usr/include/sys/time.h /usr/include/stdlib.h
DTPPacket.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
DTPPacket.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/Packet.h
DTPPacket.o: DTPPacket.h ../netsim/Timer.h ../netsim/PacketScheduler.h
DTPPacket.o: ../netsim/Scheduler.h
app_config.o: /usr/include/string.h /usr/include/iso/string_iso.h
app_config.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
app_config.o: /usr/include/sys/isa_defs.h ../netsim/common.h
app_config.o: /usr/include/sys/types.h /usr/include/sys/machtypes.h
app_config.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
app_config.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
app_config.o: /usr/include/sys/time.h /usr/include/stdlib.h
app_config.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
app_config.o: ../netsim/Config.h ../netsim/Node.h ../netsim/FIFONode.h
app_config.o: ../netsim/Packet.h FDTPFlow.h Host.h Router.h
          (Time) config_args[2].numval,
                                      (char *) config_args[3].numval);
    }
    config_argnum = 0;
    return;
}
n.h /usr/include/sys/types.h
main.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
main.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
main.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
main.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
main.o: /usr/include/sys/time.h /usr/include/stdlib.h
main.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
main.o: ../netsim/Config.h ../netsim/Packet.h ../netsim/Timer.h
main.o: ../netsim/PacketScheduler.h ../netsim/Scheduler.h
main.o: ../netsim/Topology.h /usr/include/unistd.h /usr/include/sys/unistd.h
FDTPFlow.o: ../netsim/common.h /usr/include/sys/types.h
FDTPFlow.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
FDTPFlow.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
FDTPFlow.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
FDTPFlow.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
FDTPFlow.o: /usr/include/sys/time.h /usr/include/stdlib.h
FDTPFlow.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
FDTPFlow.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/Packet.h
FDTPFlow.o: DTPPacket.h ../netsim/Timer.h ../netsim/PacketScheduler.h
FDTPFlow.o: ../netsim/Scheduler.h FDTPFlow.h Host.h ../netsim/Topology.h
FDTPFlow.o: Router.h
Router.o: ../netsim/common.h /usr/include/sys/types.h
Router.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
Router.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
Router.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
Router.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
Router.o: /usr/include/sys/time.h /usr/include/stdlib.h
Router.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
Router.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/PacketScheduler.h
Router.o: ../netsim/Timer.h ../netsim/Scheduler.h Router.h FDTPFlow.h Host.h
Host.o: ../netsim/common.h /usr/include/sys/types.h
Host.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
Host.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
Host.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
Host.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
Host.o: /usr/include/sys/time.h /usr/include/stdlib.h
Host.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
Host.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/Packet.h DTPPacket.h
Host.o: ../netsim/PacketScheduler.h ../netsim/Timer.h ../netsim/Scheduler.h
Host.o: Host.h Router.h
DTPPacket.o: ../netsim/common.h /usr/include/sys/types.h
DTPPacket.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
DTPPacket.o: /usr/include/sys/isa_defs.h /usr/include/sys/machtypes.h
DTPPacket.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
DTPPacket.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
DTPPacket.o: /usr/include/sys/time.h /usr/include/stdlib.h
DTPPacket.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
DTPPacket.o: ../netsim/Node.h ../netsim/FIFONode.h ../netsim/Packet.h
DTPPacket.o: DTPPacket.h ../netsim/Timer.h ../netsim/PacketScheduler.h
DTPPacket.o: ../netsim/Scheduler.h
app_config.o: /usr/include/string.h /usr/include/iso/string_iso.h
app_config.o: /usr/include/sys/feature_tests.h /usr/include/sys/ccompile.h
app_config.o: /usr/include/sys/isa_defs.h ../netsim/common.h
app_config.o: /usr/include/sys/types.h /usr/include/sys/machtypes.h
app_config.o: /usr/include/sys/int_types.h /usr/include/sys/select.h
app_config.o: /usr/include/sys/time_impl.h /usr/include/sys/time.h
app_config.o: /usr/include/sys/time.h /usr/include/stdlib.h
app_config.o: /usr/include/iso/stdlib_iso.h /usr/include/iso/stdlib_c99.h
app_config.o: ../netsim/Config.h ../netsim/Node.h ../netsim/FIFONode.h
app_config.o: ../netsim/Packet.h FDTPFlow.h Host.h Router.h

	// sync_bit=0;
// }
void
DTPPacket::print()
{
    Packet::print_header();
    Packet::print_payload((char *) &data[0], length - sizeof(Packet), false);
}
void
DTPPacket::print_header()
{
	TRACE(TRL3, "Packet Header:: source: %d, destination: %d, id: %d, length: %d, Sync_bit: %d, Termination_bit: %d\n",
          (int) source, (int) destination, id, length,sync_bit,term_connection );
}
 public:
	// DTPPacket();
	// ~DTPPacket();
	int sync_bit;
    int term_connection;
	void print();
	void print_header();
    unsigned char data[PAYLOAD_SIZE];
};
		printf("\nff"); */
//	((Host*)nd)->terminate(d);
}

FDTPFlow::~FDTPFlow()
{
    // Empty
}

			handle_timer((void*)1);
			retrans=scheduler->time() +retrans_timer;
			set_timer(retrans, NULL);
			retrans_bit=1;
			TRACE(TRL4,"(Time:%d) node %d Sent SYN-ACK to node %d\n",scheduler->time(),address(),destination);
			
		}
		else if (((DTPPacket*)pkt)->sync_bit==2&&sync_bit==3)
		{
			handle_timer((void*)1);
		
		}
		else if (((DTPPacket*)pkt)->sync_bit==2&&sync_bit==1)
		{
			if(retrans>=scheduler->time())
			{
				cancel_timer(retrans, NULL);
				retrans_bit=0;
			}
			get_dest(pkt);	
			sync_bit=3;
			retrans_timer=1.5*(scheduler->time()-last_transmit);
			TRACE(TRL4,"(Time:%d) node %d Got SYN-ACK from node %d\n",scheduler->time(),address(),destination);
			
			//fprintf(stderr,"Got SYN, node %d, %d %d\n",address(),retrans_timer,last_transmit);
			//fprintf(stderr,"Got SYN-ACK, node %d\n",address());	
			handle_timer((void*)1);
			TRACE(TRL4,"(Time:%d) node %d Sent ACK to node %d\n",scheduler->time(),address(),destination);
			terminate(destination);
			
			
		
		}
		else if (((DTPPacket*)pkt)->sync_bit==3&&sync_bit==2)
		{
			//fprintf(stderr,"Got ACK, node %d\n",address());
			if(retrans>=scheduler->time())
			{
				cancel_timer(retrans, NULL);
				retrans_bit=0;
			}
			if(sync_bit!=3)
			{
				sync_bit=3;
				get_dest(pkt);
				Time tm=scheduler->time();
				TRACE(TRL4,"(Time:%d) node %d Got ACK from node %d\n",scheduler->time(),address(),destination);
			
				TRACE(TRL3, "Established FDTP flow from %d to %d (%d)\n",  destination,address(),tm);
				term_bit=1;
				
			/* 	Node* nd = (scheduler->get_node)(destination);
				((Host*)nd)->terminate(address()); */
			}
		}
		else
		{
		
		/* 		if(retrans>=scheduler->time())
		{
				cancel_timer(retrans, NULL);
				retrans_bit=0;
		} */
		//fprintf(stderr,"Dropped, node %d\n",address());
		}
	
	}
	if(sync_bit==3||sync_bit==2)
	{
		if (((DTPPacket*)pkt)->term_connection==1&&term_bit==3&&sync_bit==3)
		{
			TRACE(TRL4,"(Time:%d) node %d Got Duplicate FIN from node %d\n",scheduler->time(),address(),destination);
			//fprintf(stderr,"Got FIN, node %d\n",address());
			get_dest(pkt);
			term_bit=2;
			handle_timer((void*)1);
			term_bit=3;
			TRACE(TRL4,"(Time:%d) node %d Sent Duplicate FIN-ACK to node %d\n",scheduler->time(),address(),destination);
			
		}
		else if (((DTPPacket*)pkt)->term_connection==1&&term_bit!=3)//&&term_bit==1)
		{
			
			{ 
			if(sync_bit==2)
				TRACE(TRL3, "Established FDTP flow from %d to %d (%d)\n",  destination,address(),scheduler->time());
			}
			TRACE(TRL4,"(Time:%d) node %d Got FIN from node %d\n",scheduler->time(),address(),destination);
			sync_bit=3;
			//fprintf(stderr,"Got FIN, node %d\n",address());
			get_dest(pkt);
			term_bit=2;
			handle_timer((void*)1);
			TRACE(TRL4,"(Time:%d) node %d Sent FIN-ACK to node %d\n",scheduler->time(),address(),destination);
			term_bit=3;
			handle_timer((void*)1);
			retrans=scheduler->time() +retrans_timer;
			set_timer(retrans, NULL);
			retrans_bit=1;
			TRACE(TRL4,"(Time:%d) node %d Sent FIN to node %d\n",scheduler->time(),address(),destination);
			
		}
		
		else if (((DTPPacket*)pkt)->term_connection==2&&term_bit==1&&sync_bit==3)
		{
			if(retrans>=scheduler->time())
			{
				cancel_timer(retrans, NULL);
				retrans_bit=0;
			}
			//get_dest(pkt);
			term_bit=3;
			TRACE(TRL4,"(Time:%d) node %d Got FIN-ACK from node %d\n",scheduler->time(),address(),destination);
			
			//fprintf(stderr,"Got FIN-ack, node %d (%d)\n",address(),scheduler->time());
			//handle_timer((void*)1);
		}
		else if (((DTPPacket*)pkt)->term_connection==3&&term_bit==4&&sync_bit==3)
		{
			//term_bit=4;
			TRACE(TRL4,"(Time:%d) node %d Got Duplicate FIN from node %d\n",scheduler->time(),address(),destination);
			handle_timer((void*)1);
			TRACE(TRL4,"(Time:%d) node %d Sent Duplicate FIN-ACK to node %d\n",scheduler->time(),address(),destination);
			//handle_timer((void*)1);
		}
		else if (((DTPPacket*)pkt)->term_connection==3&&term_bit==3&&sync_bit==3)
		{
			TRACE(TRL4,"(Time:%d) node %d Got FIN from node %d\n",scheduler->time(),address(),destination);
			term_bit=4;
			handle_timer((void*)1);
			TRACE(TRL4,"(Time:%d) node %d Sent FIN-ACK to node %d\n",scheduler->time(),address(),destination);
		}
		
		else if (((DTPPacket*)pkt)->term_connection==4&&term_bit==3&&sync_bit==3)
		{
			if(retrans>=scheduler->time())
			{
				cancel_timer(retrans, NULL);
				retrans_bit=0;
			}
			get_dest(pkt);	
			Time tm=scheduler->time();
			TRACE(TRL4,"(Time:%d) node %d Got FIN-ACK from node %d\n",scheduler->time(),address(),destination);
			
			TRACE(TRL3, "Tore down FDTP flow from %d to %d (%d)\n", destination, address(),tm);
			sync_bit=1;
			term_bit=0;
			retrans=0;
			retrans_bit=0;
			Node* nd = (scheduler->get_node)(destination);
			((Host*)nd)->sync_bit=1;
			((Host*)nd)->term_bit=0;
			((Host*)nd)->retrans=0;
			((Host*)nd)->retrans_bit=0;
		}
		else
		{
		/* if(retrans>=scheduler->time())
		{
				cancel_timer(retrans, NULL);
				retrans_bit=0;
		} */
			//fprintf(stderr,"Dropped, node %d\n",address());
		}
	}
	
    delete pkt;
} 
void
Host::handle_timer(void* cookie)
{
    
	if(sync_bit==1&&term_bit==0)
	{
		if(retrans==0)
		{	sync();
			last_transmit=scheduler->time();
			retrans=scheduler->time() +retrans_timer;
			set_timer(retrans, NULL);
			retrans_bit=1;
			TRACE(TRL4,"(Time:%d) node %d Sent SYN to node %d\n",scheduler->time(),address(),destination);
		}
	}
    DTPPacket*	pkt = new DTPPacket;
    unsigned char* d = &(pkt->data[0]);
	pkt->term_connection=term_bit;
    pkt->source = address();
    pkt->destination = destination;
    pkt->length = sizeof(Packet)+HEADER_SIZE;
    sent_so_far+=1;
	//fprintf(stderr,"\n %d",sent_so_far)
	pkt->id = sent_so_far;
 	pkt->sync_bit=sync_bit;
    if (send(pkt)) {
       TRACE(TRL3,"Sent packet from DTP-Host: %d\n",address());
	   pkt->print_header();
	   }
	if(retrans==scheduler->time()&&retrans_bit==1)
	{
		//fprintf(stderr,"Node=%d retrans= %d, Time= %d\n",address(),retrans,scheduler->time());
		retrans=scheduler->time() +retrans_timer;
		set_timer(retrans, NULL);
		//fprintf(stderr,"Node=%d retrans= %d, Time= %d\n",address(),retrans,scheduler->time());
	} 
	return;
}
void
Host::sync()
{
	SendMap_iter head = dest_map.find(scheduler->time());
	destination = (*head).second;
    dest_map.erase(head);
	packets_to_send = 1;
    //sent_so_far = 0;
}
void Host::insert_p(Time s,Address d)
{
	SendMapPair entry(s,d);
	dest_map.insert(entry);
}
void
Host::terminate(Address d)
{
	DTPPacket*	pkt = new DTPPacket;
    destination = d;
	term_bit=1;
	handle_timer((void*)1);
	retrans=scheduler->time() +timeout;
    set_timer(retrans, NULL);
	retrans_bit=1;
	TRACE(TRL4,"(Time:%d) node %d Sent FIN to node %d\n",scheduler->time(),address(),destination);
			
}
5601
            config_file = optarg;
            break;

        case 't':
            trace = (unsigned int) atoi(optarg);
          	break;

        default:
            usage();
            exit(1);
        }

    // Start the scheduler and topology
    scheduler = new Scheduler;
    topology = new Topology;

    // Read the configuration file
    config = new Config;
    config->parse(config_file);

    scheduler->run();
    // Execution doesn't reach here
}
signed int trace = 0;

int
usage()
{
    printf("./netsim_app -h -f <filename> -d\n\n"./Router.cpp::~Router()
{
    // Empty
}
